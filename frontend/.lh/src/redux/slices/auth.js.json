{
    "sourceFile": "src/redux/slices/auth.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1701192418527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1701193751821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,87 @@\n+import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n+/*  Auth service APIs */\n+import AuthService from \"../services/auth\";\n+import { setMessage } from \"./message\";\n+\n+/* UserLogin Slice */\n+export const userLogin = createAsyncThunk(\n+  \"user/login\",\n+  async ({ email, password }, thunkAPI) => {\n+    try {\n+      const data = await AuthService.userLogin(email, password);\n+      thunkAPI.dispatch(setMessage(data.message));\n+      console.log(\"data\", data);\n+      return data;\n+    } catch (error) {\n+      const message =\n+        (error.response &&\n+          error.response.data &&\n+          error.response.data.message) ||\n+        error.message ||\n+        error.toString();\n+      thunkAPI.dispatch(setMessage(message));\n+      return thunkAPI.rejectWithValue();\n+    }\n+  }\n+);\n+\n+/* userRegister Slice */\n+export const userRegister = createAsyncThunk(\n+  \"user/register\",\n+  async ({ username, email, password }, thunkAPI) => {\n+    try {\n+      const data = await AuthService.userRegister(username, email, password);\n+      thunkAPI.dispatch(setMessage(data.message));\n+    } catch (error) {\n+      const message =\n+        (error.response &&\n+          error.response.data &&\n+          error.response.data.message) ||\n+        error.message ||\n+        error.toString();\n+      thunkAPI.dispatch(setMessage(message));\n+      return thunkAPI.rejectWithValue();\n+    }\n+  }\n+);\n+\n+/* Auth initiakState */\n+const initialState = {\n+  isLoading: false,\n+  isLoggedIn: false,\n+  error: null,\n+  user: null,\n+};\n+\n+export const authSlice = createSlice({\n+  name: \"auth\",\n+  initialState,\n+  extraReducers: {\n+    [userLogin.pending]: (state) => {\n+      state.isLoader = true;\n+      state.user = null;\n+    },\n+    [userLogin.rejected]: (state) => {\n+      state.isLoader = false;\n+      state.user = null;\n+    },\n+    [userLogin.fulfilled]: (state, action) => {\n+      state.isLoader = false;\n+      state.user = action.payload;\n+    },\n+    [userRegister.pending]: (state) => {\n+      state.isLoader = true;\n+      state.user = null;\n+    },\n+    [userRegister.rejected]: (state) => {\n+      state.isLoader = false;\n+      state.user = null;\n+    },\n+    [userRegister.fulfilled]: (state, action) => {\n+      state.isLoader = false;\n+      state.user = null;\n+    },\n+  },\n+});\n+\n+export default authSlice.reducer;\n"
                },
                {
                    "date": 1701194701365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,91 +84,4 @@\n   },\n });\n \n export default authSlice.reducer;\n-import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n-/*  Auth service APIs */\n-import AuthService from \"../services/auth\";\n-import { setMessage } from \"./message\";\n-\n-/* UserLogin Slice */\n-export const userLogin = createAsyncThunk(\n-  \"user/login\",\n-  async ({ email, password }, thunkAPI) => {\n-    try {\n-      const data = await AuthService.userLogin(email, password);\n-      thunkAPI.dispatch(setMessage(data.message));\n-      console.log(\"data\", data);\n-      return data.docs;\n-    } catch (error) {\n-      const message =\n-        (error.response &&\n-          error.response.data &&\n-          error.response.data.message) ||\n-        error.message ||\n-        error.toString();\n-      thunkAPI.dispatch(setMessage(message));\n-      return thunkAPI.rejectWithValue();\n-    }\n-  }\n-);\n-\n-/* userRegister Slice */\n-export const userRegister = createAsyncThunk(\n-  \"user/register\",\n-  async ({ username, email, password }, thunkAPI) => {\n-    try {\n-      const data = await AuthService.userRegister(username, email, password);\n-      thunkAPI.dispatch(setMessage(data.message));\n-    } catch (error) {\n-      const message =\n-        (error.response &&\n-          error.response.data &&\n-          error.response.data.message) ||\n-        error.message ||\n-        error.toString();\n-      thunkAPI.dispatch(setMessage(message));\n-      return thunkAPI.rejectWithValue();\n-    }\n-  }\n-);\n-\n-/* Auth initiakState */\n-const initialState = {\n-  isLoading: false,\n-  isLoggedIn: false,\n-  error: null,\n-  user: null,\n-};\n-\n-export const authSlice = createSlice({\n-  name: \"auth\",\n-  initialState,\n-  extraReducers: {\n-    [userLogin.pending]: (state) => {\n-      state.isLoader = true;\n-      state.user = null;\n-    },\n-    [userLogin.rejected]: (state) => {\n-      state.isLoader = false;\n-      state.user = null;\n-    },\n-    [userLogin.fulfilled]: (state, action) => {\n-      state.isLoader = false;\n-      state.user = action.payload;\n-    },\n-    [userRegister.pending]: (state) => {\n-      state.isLoader = true;\n-      state.user = null;\n-    },\n-    [userRegister.rejected]: (state) => {\n-      state.isLoader = false;\n-      state.user = null;\n-    },\n-    [userRegister.fulfilled]: (state, action) => {\n-      state.isLoader = false;\n-      state.user = null;\n-    },\n-  },\n-});\n-\n-export default authSlice.reducer;\n"
                },
                {
                    "date": 1701195141856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,87 @@\n+import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n+/*  Auth service APIs */\n+import AuthService from \"../services/auth\";\n+import { setMessage } from \"./message\";\n+\n+/* UserLogin Slice */\n+export const userLogin = createAsyncThunk(\n+  \"user/login\",\n+  async ({ email, password }, thunkAPI) => {\n+    try {\n+      const data = await AuthService.userLogin(email, password);\n+      thunkAPI.dispatch(setMessage(data.message));\n+      console.log(\"data\", data);\n+      return data.docs;\n+    } catch (error) {\n+      const message =\n+        (error.response &&\n+          error.response.data &&\n+          error.response.data.message) ||\n+        error.message ||\n+        error.toString();\n+      thunkAPI.dispatch(setMessage(message));\n+      return thunkAPI.rejectWithValue();\n+    }\n+  }\n+);\n+\n+/* userRegister Slice */\n+export const userRegister = createAsyncThunk(\n+  \"user/register\",\n+  async ({ username, email, password }, thunkAPI) => {\n+    try {\n+      const data = await AuthService.userRegister(username, email, password);\n+      thunkAPI.dispatch(setMessage(data.message));\n+    } catch (error) {\n+      const message =\n+        (error.response &&\n+          error.response.data &&\n+          error.response.data.message) ||\n+        error.message ||\n+        error.toString();\n+      thunkAPI.dispatch(setMessage(message));\n+      return thunkAPI.rejectWithValue();\n+    }\n+  }\n+);\n+\n+/* Auth initiakState */\n+const initialState = {\n+  isLoading: false,\n+  isLoggedIn: false,\n+  error: null,\n+  user: null,\n+};\n+\n+export const authSlice = createSlice({\n+  name: \"auth\",\n+  initialState,\n+  extraReducers: {\n+    [userLogin.pending]: (state) => {\n+      state.isLoader = true;\n+      state.user = null;\n+    },\n+    [userLogin.rejected]: (state) => {\n+      state.isLoader = false;\n+      state.user = null;\n+    },\n+    [userLogin.fulfilled]: (state, action) => {\n+      state.isLoader = false;\n+      state.user = action.payload;\n+    },\n+    [userRegister.pending]: (state) => {\n+      state.isLoader = true;\n+      state.user = null;\n+    },\n+    [userRegister.rejected]: (state) => {\n+      state.isLoader = false;\n+      state.user = null;\n+    },\n+    [userRegister.fulfilled]: (state, action) => {\n+      state.isLoader = false;\n+      state.user = null;\n+    },\n+  },\n+});\n+\n+export default authSlice.reducer;\n"
                },
                {
                    "date": 1701253414141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,11 +27,11 @@\n \n /* userRegister Slice */\n export const userRegister = createAsyncThunk(\n   \"user/register\",\n-  async ({ username, email, password }, thunkAPI) => {\n+  async ({ name, email, password }, thunkAPI) => {\n     try {\n-      const data = await AuthService.userRegister(username, email, password);\n+      const data = await AuthService.userRegister(name, email, password);\n       thunkAPI.dispatch(setMessage(data.message));\n     } catch (error) {\n       const message =\n         (error.response &&\n@@ -84,91 +84,4 @@\n   },\n });\n \n export default authSlice.reducer;\n-import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n-/*  Auth service APIs */\n-import AuthService from \"../services/auth\";\n-import { setMessage } from \"./message\";\n-\n-/* UserLogin Slice */\n-export const userLogin = createAsyncThunk(\n-  \"user/login\",\n-  async ({ email, password }, thunkAPI) => {\n-    try {\n-      const data = await AuthService.userLogin(email, password);\n-      thunkAPI.dispatch(setMessage(data.message));\n-      console.log(\"data\", data);\n-      return data;\n-    } catch (error) {\n-      const message =\n-        (error.response &&\n-          error.response.data &&\n-          error.response.data.message) ||\n-        error.message ||\n-        error.toString();\n-      thunkAPI.dispatch(setMessage(message));\n-      return thunkAPI.rejectWithValue();\n-    }\n-  }\n-);\n-\n-/* userRegister Slice */\n-export const userRegister = createAsyncThunk(\n-  \"user/register\",\n-  async ({ username, email, password }, thunkAPI) => {\n-    try {\n-      const data = await AuthService.userRegister(username, email, password);\n-      thunkAPI.dispatch(setMessage(data.message));\n-    } catch (error) {\n-      const message =\n-        (error.response &&\n-          error.response.data &&\n-          error.response.data.message) ||\n-        error.message ||\n-        error.toString();\n-      thunkAPI.dispatch(setMessage(message));\n-      return thunkAPI.rejectWithValue();\n-    }\n-  }\n-);\n-\n-/* Auth initiakState */\n-const initialState = {\n-  isLoading: false,\n-  isLoggedIn: false,\n-  error: null,\n-  user: null,\n-};\n-\n-export const authSlice = createSlice({\n-  name: \"auth\",\n-  initialState,\n-  extraReducers: {\n-    [userLogin.pending]: (state) => {\n-      state.isLoader = true;\n-      state.user = null;\n-    },\n-    [userLogin.rejected]: (state) => {\n-      state.isLoader = false;\n-      state.user = null;\n-    },\n-    [userLogin.fulfilled]: (state, action) => {\n-      state.isLoader = false;\n-      state.user = action.payload;\n-    },\n-    [userRegister.pending]: (state) => {\n-      state.isLoader = true;\n-      state.user = null;\n-    },\n-    [userRegister.rejected]: (state) => {\n-      state.isLoader = false;\n-      state.user = null;\n-    },\n-    [userRegister.fulfilled]: (state, action) => {\n-      state.isLoader = false;\n-      state.user = null;\n-    },\n-  },\n-});\n-\n-export default authSlice.reducer;\n"
                },
                {
                    "date": 1701256880132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,8 @@\n   async ({ email, password }, thunkAPI) => {\n     try {\n       const data = await AuthService.userLogin(email, password);\n       thunkAPI.dispatch(setMessage(data.message));\n-      console.log(\"data\", data);\n       return data.docs;\n     } catch (error) {\n       const message =\n         (error.response &&\n"
                },
                {
                    "date": 1701257960906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,98 @@\n+import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n+/*  Auth service APIs */\n+import AuthService from \"../services/auth\";\n+import { setMessage } from \"./message\";\n+\n+/* UserLogin Slice */\n+export const userLogin = createAsyncThunk(\n+  \"user/login\",\n+  async ({ email, password }, thunkAPI) => {\n+    try {\n+      const data = await AuthService.userLogin(email, password);\n+      thunkAPI.dispatch(setMessage(data.message));\n+      return data.docs;\n+    } catch (error) {\n+      const message =\n+        (error.response &&\n+          error.response.data &&\n+          error.response.data.message) ||\n+        error.message ||\n+        error.toString();\n+      thunkAPI.dispatch(setMessage(message));\n+      return thunkAPI.rejectWithValue();\n+    }\n+  }\n+);\n+\n+/* userRegister Slice */\n+export const userRegister = createAsyncThunk(\n+  \"user/register\",\n+  async ({ name, email, password }, thunkAPI) => {\n+    try {\n+      const data = await AuthService.userRegister(name, email, password);\n+      thunkAPI.dispatch(setMessage(data.message));\n+    } catch (error) {\n+      const message =\n+        (error.response &&\n+          error.response.data &&\n+          error.response.data.message) ||\n+        error.message ||\n+        error.toString();\n+      thunkAPI.dispatch(setMessage(message));\n+      return thunkAPI.rejectWithValue();\n+    }\n+  }\n+);\n+\n+/* Auth initiakState */\n+const initialState = {\n+  isLoading: false,\n+  isLoggedIn: false,\n+  error: null,\n+  user: null,\n+};\n+\n+const handleLogout = () => {\n+  createAsyncThunk(\n+    \"user/register\",\n+    async (thunkAPI) => {\n+      try {\n+        thunkAPI.dispatch(clearMessage());\n+        thunkAPI.dispatch(setMessage(\"Logout successfully\"));\n+      } catch (error) {\n+\n+      }\n+    }\n+\n+export const authSlice = createSlice({\n+      name: \"auth\",\n+      initialState,\n+      extraReducers: {\n+        [userLogin.pending]: (state) => {\n+          state.isLoader = true;\n+          state.user = null;\n+        },\n+        [userLogin.rejected]: (state) => {\n+          state.isLoader = false;\n+          state.user = null;\n+        },\n+        [userLogin.fulfilled]: (state, action) => {\n+          state.isLoader = false;\n+          state.user = action.payload;\n+        },\n+        [userRegister.pending]: (state) => {\n+          state.isLoader = true;\n+          state.user = null;\n+        },\n+        [userRegister.rejected]: (state) => {\n+          state.isLoader = false;\n+          state.user = null;\n+        },\n+        [userRegister.fulfilled]: (state, action) => {\n+          state.isLoader = false;\n+          state.user = null;\n+        },\n+      },\n+    });\n+\n+  export default authSlice.reducer;\n"
                },
                {
                    "date": 1701257974319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n       try {\n         thunkAPI.dispatch(clearMessage());\n         thunkAPI.dispatch(setMessage(\"Logout successfully\"));\n       } catch (error) {\n-\n+        console.log(error, \"error during logout\")\n       }\n     }\n \n export const authSlice = createSlice({\n@@ -95,90 +95,4 @@\n       },\n     });\n \n   export default authSlice.reducer;\n-import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n-/*  Auth service APIs */\n-import AuthService from \"../services/auth\";\n-import { setMessage } from \"./message\";\n-\n-/* UserLogin Slice */\n-export const userLogin = createAsyncThunk(\n-  \"user/login\",\n-  async ({ email, password }, thunkAPI) => {\n-    try {\n-      const data = await AuthService.userLogin(email, password);\n-      thunkAPI.dispatch(setMessage(data.message));\n-      return data.docs;\n-    } catch (error) {\n-      const message =\n-        (error.response &&\n-          error.response.data &&\n-          error.response.data.message) ||\n-        error.message ||\n-        error.toString();\n-      thunkAPI.dispatch(setMessage(message));\n-      return thunkAPI.rejectWithValue();\n-    }\n-  }\n-);\n-\n-/* userRegister Slice */\n-export const userRegister = createAsyncThunk(\n-  \"user/register\",\n-  async ({ name, email, password }, thunkAPI) => {\n-    try {\n-      const data = await AuthService.userRegister(name, email, password);\n-      thunkAPI.dispatch(setMessage(data.message));\n-    } catch (error) {\n-      const message =\n-        (error.response &&\n-          error.response.data &&\n-          error.response.data.message) ||\n-        error.message ||\n-        error.toString();\n-      thunkAPI.dispatch(setMessage(message));\n-      return thunkAPI.rejectWithValue();\n-    }\n-  }\n-);\n-\n-/* Auth initiakState */\n-const initialState = {\n-  isLoading: false,\n-  isLoggedIn: false,\n-  error: null,\n-  user: null,\n-};\n-\n-export const authSlice = createSlice({\n-  name: \"auth\",\n-  initialState,\n-  extraReducers: {\n-    [userLogin.pending]: (state) => {\n-      state.isLoader = true;\n-      state.user = null;\n-    },\n-    [userLogin.rejected]: (state) => {\n-      state.isLoader = false;\n-      state.user = null;\n-    },\n-    [userLogin.fulfilled]: (state, action) => {\n-      state.isLoader = false;\n-      state.user = action.payload;\n-    },\n-    [userRegister.pending]: (state) => {\n-      state.isLoader = true;\n-      state.user = null;\n-    },\n-    [userRegister.rejected]: (state) => {\n-      state.isLoader = false;\n-      state.user = null;\n-    },\n-    [userRegister.fulfilled]: (state, action) => {\n-      state.isLoader = false;\n-      state.user = null;\n-    },\n-  },\n-});\n-\n-export default authSlice.reducer;\n"
                },
                {
                    "date": 1701257987511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,38 +61,39 @@\n         thunkAPI.dispatch(setMessage(\"Logout successfully\"));\n       } catch (error) {\n         console.log(error, \"error during logout\")\n       }\n-    }\n+    })\n+}\n \n export const authSlice = createSlice({\n-      name: \"auth\",\n-      initialState,\n-      extraReducers: {\n-        [userLogin.pending]: (state) => {\n-          state.isLoader = true;\n-          state.user = null;\n-        },\n-        [userLogin.rejected]: (state) => {\n-          state.isLoader = false;\n-          state.user = null;\n-        },\n-        [userLogin.fulfilled]: (state, action) => {\n-          state.isLoader = false;\n-          state.user = action.payload;\n-        },\n-        [userRegister.pending]: (state) => {\n-          state.isLoader = true;\n-          state.user = null;\n-        },\n-        [userRegister.rejected]: (state) => {\n-          state.isLoader = false;\n-          state.user = null;\n-        },\n-        [userRegister.fulfilled]: (state, action) => {\n-          state.isLoader = false;\n-          state.user = null;\n-        },\n-      },\n-    });\n+  name: \"auth\",\n+  initialState,\n+  extraReducers: {\n+    [userLogin.pending]: (state) => {\n+      state.isLoader = true;\n+      state.user = null;\n+    },\n+    [userLogin.rejected]: (state) => {\n+      state.isLoader = false;\n+      state.user = null;\n+    },\n+    [userLogin.fulfilled]: (state, action) => {\n+      state.isLoader = false;\n+      state.user = action.payload;\n+    },\n+    [userRegister.pending]: (state) => {\n+      state.isLoader = true;\n+      state.user = null;\n+    },\n+    [userRegister.rejected]: (state) => {\n+      state.isLoader = false;\n+      state.user = null;\n+    },\n+    [userRegister.fulfilled]: (state, action) => {\n+      state.isLoader = false;\n+      state.user = null;\n+    },\n+  },\n+});\n \n-  export default authSlice.reducer;\n+export default authSlice.reducer;\n"
                },
                {
                    "date": 1701257993206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,99 @@\n+import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n+/*  Auth service APIs */\n+import AuthService from \"../services/auth\";\n+import { setMessage } from \"./message\";\n+\n+/* UserLogin Slice */\n+export const userLogin = createAsyncThunk(\n+  \"user/login\",\n+  async ({ email, password }, thunkAPI) => {\n+    try {\n+      const data = await AuthService.userLogin(email, password);\n+      thunkAPI.dispatch(setMessage(data.message));\n+      return data.docs;\n+    } catch (error) {\n+      const message =\n+        (error.response &&\n+          error.response.data &&\n+          error.response.data.message) ||\n+        error.message ||\n+        error.toString();\n+      thunkAPI.dispatch(setMessage(message));\n+      return thunkAPI.rejectWithValue();\n+    }\n+  }\n+);\n+\n+/* userRegister Slice */\n+export const userRegister = createAsyncThunk(\n+  \"user/register\",\n+  async ({ name, email, password }, thunkAPI) => {\n+    try {\n+      const data = await AuthService.userRegister(name, email, password);\n+      thunkAPI.dispatch(setMessage(data.message));\n+    } catch (error) {\n+      const message =\n+        (error.response &&\n+          error.response.data &&\n+          error.response.data.message) ||\n+        error.message ||\n+        error.toString();\n+      thunkAPI.dispatch(setMessage(message));\n+      return thunkAPI.rejectWithValue();\n+    }\n+  }\n+);\n+\n+/* Auth initiakState */\n+const initialState = {\n+  isLoading: false,\n+  isLoggedIn: false,\n+  error: null,\n+  user: null,\n+};\n+\n+const handleLogout = () => {\n+  createAsyncThunk(\n+    \"user/logout\",\n+    async (thunkAPI) => {\n+      try {\n+        thunkAPI.dispatch(clearMessage());\n+        thunkAPI.dispatch(setMessage(\"Logout successfully\"));\n+      } catch (error) {\n+        console.log(error, \"error during logout\")\n+      }\n+    })\n+}\n+\n+export const authSlice = createSlice({\n+  name: \"auth\",\n+  initialState,\n+  extraReducers: {\n+    [userLogin.pending]: (state) => {\n+      state.isLoader = true;\n+      state.user = null;\n+    },\n+    [userLogin.rejected]: (state) => {\n+      state.isLoader = false;\n+      state.user = null;\n+    },\n+    [userLogin.fulfilled]: (state, action) => {\n+      state.isLoader = false;\n+      state.user = action.payload;\n+    },\n+    [userRegister.pending]: (state) => {\n+      state.isLoader = true;\n+      state.user = null;\n+    },\n+    [userRegister.rejected]: (state) => {\n+      state.isLoader = false;\n+      state.user = null;\n+    },\n+    [userRegister.fulfilled]: (state, action) => {\n+      state.isLoader = false;\n+      state.user = null;\n+    },\n+  },\n+});\n+\n+export default authSlice.reducer;\n"
                },
                {
                    "date": 1701258005778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,120 +51,19 @@\n   error: null,\n   user: null,\n };\n \n-const handleLogout = () => {\n-  createAsyncThunk(\n-    \"user/logout\",\n-    async (thunkAPI) => {\n-      try {\n-        thunkAPI.dispatch(clearMessage());\n-        thunkAPI.dispatch(setMessage(\"Logout successfully\"));\n-      } catch (error) {\n-        console.log(error, \"error during logout\")\n-      }\n-    })\n-}\n-\n-export const authSlice = createSlice({\n-  name: \"auth\",\n-  initialState,\n-  extraReducers: {\n-    [userLogin.pending]: (state) => {\n-      state.isLoader = true;\n-      state.user = null;\n-    },\n-    [userLogin.rejected]: (state) => {\n-      state.isLoader = false;\n-      state.user = null;\n-    },\n-    [userLogin.fulfilled]: (state, action) => {\n-      state.isLoader = false;\n-      state.user = action.payload;\n-    },\n-    [userRegister.pending]: (state) => {\n-      state.isLoader = true;\n-      state.user = null;\n-    },\n-    [userRegister.rejected]: (state) => {\n-      state.isLoader = false;\n-      state.user = null;\n-    },\n-    [userRegister.fulfilled]: (state, action) => {\n-      state.isLoader = false;\n-      state.user = null;\n-    },\n-  },\n-});\n-\n-export default authSlice.reducer;\n-import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n-/*  Auth service APIs */\n-import AuthService from \"../services/auth\";\n-import { setMessage } from \"./message\";\n-\n-/* UserLogin Slice */\n-export const userLogin = createAsyncThunk(\n-  \"user/login\",\n-  async ({ email, password }, thunkAPI) => {\n+const handleLogout = createAsyncThunk(\n+  \"user/logout\",\n+  async (thunkAPI) => {\n     try {\n-      const data = await AuthService.userLogin(email, password);\n-      thunkAPI.dispatch(setMessage(data.message));\n-      return data.docs;\n+      thunkAPI.dispatch(clearMessage());\n+      thunkAPI.dispatch(setMessage(\"Logout successfully\"));\n     } catch (error) {\n-      const message =\n-        (error.response &&\n-          error.response.data &&\n-          error.response.data.message) ||\n-        error.message ||\n-        error.toString();\n-      thunkAPI.dispatch(setMessage(message));\n-      return thunkAPI.rejectWithValue();\n+      console.log(error, \"error during logout\")\n     }\n-  }\n-);\n+  })\n \n-/* userRegister Slice */\n-export const userRegister = createAsyncThunk(\n-  \"user/register\",\n-  async ({ name, email, password }, thunkAPI) => {\n-    try {\n-      const data = await AuthService.userRegister(name, email, password);\n-      thunkAPI.dispatch(setMessage(data.message));\n-    } catch (error) {\n-      const message =\n-        (error.response &&\n-          error.response.data &&\n-          error.response.data.message) ||\n-        error.message ||\n-        error.toString();\n-      thunkAPI.dispatch(setMessage(message));\n-      return thunkAPI.rejectWithValue();\n-    }\n-  }\n-);\n-\n-/* Auth initiakState */\n-const initialState = {\n-  isLoading: false,\n-  isLoggedIn: false,\n-  error: null,\n-  user: null,\n-};\n-\n-const handleLogout = () => {\n-  createAsyncThunk(\n-    \"user/register\",\n-    async (thunkAPI) => {\n-      try {\n-        thunkAPI.dispatch(clearMessage());\n-        thunkAPI.dispatch(setMessage(\"Logout successfully\"));\n-      } catch (error) {\n-        console.log(error, \"error during logout\")\n-      }\n-    })\n-}\n-\n export const authSlice = createSlice({\n   name: \"auth\",\n   initialState,\n   extraReducers: {\n"
                },
                {
                    "date": 1701258039685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,8 +90,12 @@\n     [userRegister.fulfilled]: (state, action) => {\n       state.isLoader = false;\n       state.user = null;\n     },\n+    [handleLogout.fulfilled]: (state, action) => {\n+      state.isLoader = false;\n+      state.user = null;\n+    },\n   },\n });\n \n export default authSlice.reducer;\n"
                },
                {
                    "date": 1701258200289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,103 @@\n+import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n+/*  Auth service APIs */\n+import AuthService from \"../services/auth\";\n+import { setMessage } from \"./message\";\n+\n+/* UserLogin Slice */\n+export const userLogin = createAsyncThunk(\n+  \"user/login\",\n+  async ({ email, password }, thunkAPI) => {\n+    try {\n+      const data = await AuthService.userLogin(email, password);\n+      thunkAPI.dispatch(setMessage(data.message));\n+      return data.docs;\n+    } catch (error) {\n+      const message =\n+        (error.response &&\n+          error.response.data &&\n+          error.response.data.message) ||\n+        error.message ||\n+        error.toString();\n+      thunkAPI.dispatch(setMessage(message));\n+      return thunkAPI.rejectWithValue();\n+    }\n+  }\n+);\n+\n+/* userRegister Slice */\n+export const userRegister = createAsyncThunk(\n+  \"user/register\",\n+  async ({ name, email, password }, thunkAPI) => {\n+    try {\n+      const data = await AuthService.userRegister(name, email, password);\n+      thunkAPI.dispatch(setMessage(data.message));\n+    } catch (error) {\n+      const message =\n+        (error.response &&\n+          error.response.data &&\n+          error.response.data.message) ||\n+        error.message ||\n+        error.toString();\n+      thunkAPI.dispatch(setMessage(message));\n+      return thunkAPI.rejectWithValue();\n+    }\n+  }\n+);\n+\n+export const handleLogout = createAsyncThunk(\n+  \"user/logout\",\n+  async (thunkAPI) => {\n+    try {\n+      thunkAPI.dispatch(clearMessage());\n+      thunkAPI.dispatch(setMessage(\"Logout successfully\"));\n+    } catch (error) {\n+      console.log(error, \"error during logout\")\n+    }\n+  })\n+\n+\n+/* Auth initiakState */\n+const initialState = {\n+  isLoading: false,\n+  isLoggedIn: false,\n+  error: null,\n+  user: null,\n+};\n+\n+\n+export const authSlice = createSlice({\n+  name: \"auth\",\n+  initialState,\n+  extraReducers: {\n+    [userLogin.pending]: (state) => {\n+      state.isLoader = true;\n+      state.user = null;\n+    },\n+    [userLogin.rejected]: (state) => {\n+      state.isLoader = false;\n+      state.user = null;\n+    },\n+    [userLogin.fulfilled]: (state, action) => {\n+      state.isLoader = false;\n+      state.user = action.payload;\n+    },\n+    [userRegister.pending]: (state) => {\n+      state.isLoader = true;\n+      state.user = null;\n+    },\n+    [userRegister.rejected]: (state) => {\n+      state.isLoader = false;\n+      state.user = null;\n+    },\n+    [userRegister.fulfilled]: (state, action) => {\n+      state.isLoader = false;\n+      state.user = null;\n+    },\n+    [handleLogout.fulfilled]: (state, action) => {\n+      state.isLoader = false;\n+      state.user = null;\n+    },\n+  },\n+});\n+\n+export default authSlice.reducer;\n"
                },
                {
                    "date": 1701258255395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,103 @@\n+import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n+/*  Auth service APIs */\n+import AuthService from \"../services/auth\";\n+import { setMessage } from \"./message\";\n+\n+/* UserLogin Slice */\n+export const userLogin = createAsyncThunk(\n+  \"user/login\",\n+  async ({ email, password }, thunkAPI) => {\n+    try {\n+      const data = await AuthService.userLogin(email, password);\n+      thunkAPI.dispatch(setMessage(data.message));\n+      return data.docs;\n+    } catch (error) {\n+      const message =\n+        (error.response &&\n+          error.response.data &&\n+          error.response.data.message) ||\n+        error.message ||\n+        error.toString();\n+      thunkAPI.dispatch(setMessage(message));\n+      return thunkAPI.rejectWithValue();\n+    }\n+  }\n+);\n+\n+/* userRegister Slice */\n+export const userRegister = createAsyncThunk(\n+  \"user/register\",\n+  async ({ name, email, password }, thunkAPI) => {\n+    try {\n+      const data = await AuthService.userRegister(name, email, password);\n+      thunkAPI.dispatch(setMessage(data.message));\n+    } catch (error) {\n+      const message =\n+        (error.response &&\n+          error.response.data &&\n+          error.response.data.message) ||\n+        error.message ||\n+        error.toString();\n+      thunkAPI.dispatch(setMessage(message));\n+      return thunkAPI.rejectWithValue();\n+    }\n+  }\n+);\n+\n+export const handleLogout = createAsyncThunk(\n+  \"user/logout\",\n+  async (thunkAPI) => {\n+    try {\n+      thunkAPI.dispatch(clearMessage());\n+      thunkAPI.dispatch(setMessage(\"Logout successfully\"));\n+    } catch (error) {\n+      console.log(error, \"error during logout\")\n+    }\n+  })\n+\n+\n+/* Auth initiakState */\n+const initialState = {\n+  isLoading: false,\n+  isLoggedIn: false,\n+  error: null,\n+  user: null,\n+};\n+\n+\n+export const authSlice = createSlice({\n+  name: \"auth\",\n+  initialState,\n+  extraReducers: {\n+    [userLogin.pending]: (state) => {\n+      state.isLoader = true;\n+      state.user = null;\n+    },\n+    [userLogin.rejected]: (state) => {\n+      state.isLoader = false;\n+      state.user = null;\n+    },\n+    [userLogin.fulfilled]: (state, action) => {\n+      state.isLoader = false;\n+      state.user = action.payload;\n+    },\n+    [userRegister.pending]: (state) => {\n+      state.isLoader = true;\n+      state.user = null;\n+    },\n+    [userRegister.rejected]: (state) => {\n+      state.isLoader = false;\n+      state.user = null;\n+    },\n+    [userRegister.fulfilled]: (state, action) => {\n+      state.isLoader = false;\n+      state.user = null;\n+    },\n+    [handleLogout.fulfilled]: (state, action) => {\n+      state.isLoader = false;\n+      state.user = null;\n+    },\n+  },\n+});\n+\n+export default authSlice.reducer;\n"
                },
                {
                    "date": 1701258385047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,208 +100,4 @@\n   },\n });\n \n export default authSlice.reducer;\n-import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n-/*  Auth service APIs */\n-import AuthService from \"../services/auth\";\n-import { setMessage } from \"./message\";\n-\n-/* UserLogin Slice */\n-export const userLogin = createAsyncThunk(\n-  \"user/login\",\n-  async ({ email, password }, thunkAPI) => {\n-    try {\n-      const data = await AuthService.userLogin(email, password);\n-      thunkAPI.dispatch(setMessage(data.message));\n-      return data.docs;\n-    } catch (error) {\n-      const message =\n-        (error.response &&\n-          error.response.data &&\n-          error.response.data.message) ||\n-        error.message ||\n-        error.toString();\n-      thunkAPI.dispatch(setMessage(message));\n-      return thunkAPI.rejectWithValue();\n-    }\n-  }\n-);\n-\n-/* userRegister Slice */\n-export const userRegister = createAsyncThunk(\n-  \"user/register\",\n-  async ({ name, email, password }, thunkAPI) => {\n-    try {\n-      const data = await AuthService.userRegister(name, email, password);\n-      thunkAPI.dispatch(setMessage(data.message));\n-    } catch (error) {\n-      const message =\n-        (error.response &&\n-          error.response.data &&\n-          error.response.data.message) ||\n-        error.message ||\n-        error.toString();\n-      thunkAPI.dispatch(setMessage(message));\n-      return thunkAPI.rejectWithValue();\n-    }\n-  }\n-);\n-\n-export const handleLogout = createAsyncThunk(\n-  \"user/logout\",\n-  async (thunkAPI) => {\n-    try {\n-      thunkAPI.dispatch(clearMessage());\n-      thunkAPI.dispatch(setMessage(\"Logout successfully\"));\n-    } catch (error) {\n-      console.log(error, \"error during logout\")\n-    }\n-  })\n-\n-\n-/* Auth initiakState */\n-const initialState = {\n-  isLoading: false,\n-  isLoggedIn: false,\n-  error: null,\n-  user: null,\n-};\n-\n-\n-export const authSlice = createSlice({\n-  name: \"auth\",\n-  initialState,\n-  extraReducers: {\n-    [userLogin.pending]: (state) => {\n-      state.isLoader = true;\n-      state.user = null;\n-    },\n-    [userLogin.rejected]: (state) => {\n-      state.isLoader = false;\n-      state.user = null;\n-    },\n-    [userLogin.fulfilled]: (state, action) => {\n-      state.isLoader = false;\n-      state.user = action.payload;\n-    },\n-    [userRegister.pending]: (state) => {\n-      state.isLoader = true;\n-      state.user = null;\n-    },\n-    [userRegister.rejected]: (state) => {\n-      state.isLoader = false;\n-      state.user = null;\n-    },\n-    [userRegister.fulfilled]: (state, action) => {\n-      state.isLoader = false;\n-      state.user = null;\n-    },\n-    [handleLogout.fulfilled]: (state, action) => {\n-      state.isLoader = false;\n-      state.user = null;\n-    },\n-  },\n-});\n-\n-export default authSlice.reducer;\n-import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n-/*  Auth service APIs */\n-import AuthService from \"../services/auth\";\n-import { setMessage } from \"./message\";\n-\n-/* UserLogin Slice */\n-export const userLogin = createAsyncThunk(\n-  \"user/login\",\n-  async ({ email, password }, thunkAPI) => {\n-    try {\n-      const data = await AuthService.userLogin(email, password);\n-      thunkAPI.dispatch(setMessage(data.message));\n-      return data.docs;\n-    } catch (error) {\n-      const message =\n-        (error.response &&\n-          error.response.data &&\n-          error.response.data.message) ||\n-        error.message ||\n-        error.toString();\n-      thunkAPI.dispatch(setMessage(message));\n-      return thunkAPI.rejectWithValue();\n-    }\n-  }\n-);\n-\n-/* userRegister Slice */\n-export const userRegister = createAsyncThunk(\n-  \"user/register\",\n-  async ({ name, email, password }, thunkAPI) => {\n-    try {\n-      const data = await AuthService.userRegister(name, email, password);\n-      thunkAPI.dispatch(setMessage(data.message));\n-    } catch (error) {\n-      const message =\n-        (error.response &&\n-          error.response.data &&\n-          error.response.data.message) ||\n-        error.message ||\n-        error.toString();\n-      thunkAPI.dispatch(setMessage(message));\n-      return thunkAPI.rejectWithValue();\n-    }\n-  }\n-);\n-\n-/* Auth initiakState */\n-const initialState = {\n-  isLoading: false,\n-  isLoggedIn: false,\n-  error: null,\n-  user: null,\n-};\n-\n-const handleLogout = createAsyncThunk(\n-  \"user/logout\",\n-  async (thunkAPI) => {\n-    try {\n-      thunkAPI.dispatch(clearMessage());\n-      thunkAPI.dispatch(setMessage(\"Logout successfully\"));\n-    } catch (error) {\n-      console.log(error, \"error during logout\")\n-    }\n-  })\n-\n-export const authSlice = createSlice({\n-  name: \"auth\",\n-  initialState,\n-  extraReducers: {\n-    [userLogin.pending]: (state) => {\n-      state.isLoader = true;\n-      state.user = null;\n-    },\n-    [userLogin.rejected]: (state) => {\n-      state.isLoader = false;\n-      state.user = null;\n-    },\n-    [userLogin.fulfilled]: (state, action) => {\n-      state.isLoader = false;\n-      state.user = action.payload;\n-    },\n-    [userRegister.pending]: (state) => {\n-      state.isLoader = true;\n-      state.user = null;\n-    },\n-    [userRegister.rejected]: (state) => {\n-      state.isLoader = false;\n-      state.user = null;\n-    },\n-    [userRegister.fulfilled]: (state, action) => {\n-      state.isLoader = false;\n-      state.user = null;\n-    },\n-    [handleLogout.fulfilled]: (state, action) => {\n-      state.isLoader = false;\n-      state.user = null;\n-    },\n-  },\n-});\n-\n-export default authSlice.reducer;\n"
                },
                {
                    "date": 1701258398301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,103 @@\n+import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n+/*  Auth service APIs */\n+import AuthService from \"../services/auth\";\n+import { setMessage } from \"./message\";\n+\n+/* UserLogin Slice */\n+export const userLogin = createAsyncThunk(\n+  \"user/login\",\n+  async ({ email, password }, thunkAPI) => {\n+    try {\n+      const data = await AuthService.userLogin(email, password);\n+      thunkAPI.dispatch(setMessage(data.message));\n+      return data.docs;\n+    } catch (error) {\n+      const message =\n+        (error.response &&\n+          error.response.data &&\n+          error.response.data.message) ||\n+        error.message ||\n+        error.toString();\n+      thunkAPI.dispatch(setMessage(message));\n+      return thunkAPI.rejectWithValue();\n+    }\n+  }\n+);\n+\n+/* userRegister Slice */\n+export const userRegister = createAsyncThunk(\n+  \"user/register\",\n+  async ({ name, email, password }, thunkAPI) => {\n+    try {\n+      const data = await AuthService.userRegister(name, email, password);\n+      thunkAPI.dispatch(setMessage(data.message));\n+    } catch (error) {\n+      const message =\n+        (error.response &&\n+          error.response.data &&\n+          error.response.data.message) ||\n+        error.message ||\n+        error.toString();\n+      thunkAPI.dispatch(setMessage(message));\n+      return thunkAPI.rejectWithValue();\n+    }\n+  }\n+);\n+\n+export const handleLogout = createAsyncThunk(\n+  \"user/logout\",\n+  async (thunkAPI) => {\n+    try {\n+      thunkAPI.dispatch(clearMessage());\n+      thunkAPI.dispatch(setMessage(\"Logout successfully\"));\n+    } catch (error) {\n+      console.log(error, \"error during logout\")\n+    }\n+  })\n+\n+\n+/* Auth initiakState */\n+const initialState = {\n+  isLoading: false,\n+  isLoggedIn: false,\n+  error: null,\n+  user: null,\n+};\n+\n+\n+export const authSlice = createSlice({\n+  name: \"auth\",\n+  initialState,\n+  extraReducers: {\n+    [userLogin.pending]: (state) => {\n+      state.isLoader = true;\n+      state.user = null;\n+    },\n+    [userLogin.rejected]: (state) => {\n+      state.isLoader = false;\n+      state.user = null;\n+    },\n+    [userLogin.fulfilled]: (state, action) => {\n+      state.isLoader = false;\n+      state.user = action.payload;\n+    },\n+    [userRegister.pending]: (state) => {\n+      state.isLoader = true;\n+      state.user = null;\n+    },\n+    [userRegister.rejected]: (state) => {\n+      state.isLoader = false;\n+      state.user = null;\n+    },\n+    [userRegister.fulfilled]: (state, action) => {\n+      state.isLoader = false;\n+      state.user = null;\n+    },\n+    [handleLogout.fulfilled]: (state, action) => {\n+      state.isLoader = false;\n+      state.user = null;\n+    },\n+  },\n+});\n+\n+export default authSlice.reducer;\n"
                },
                {
                    "date": 1701258414252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,112 +49,10 @@\n   async (thunkAPI) => {\n     try {\n       thunkAPI.dispatch(clearMessage());\n       thunkAPI.dispatch(setMessage(\"Logout successfully\"));\n-    } catch (error) {\n-      console.log(error, \"error during logout\")\n-    }\n-  })\n-\n-\n-/* Auth initiakState */\n-const initialState = {\n-  isLoading: false,\n-  isLoggedIn: false,\n-  error: null,\n-  user: null,\n-};\n-\n-\n-export const authSlice = createSlice({\n-  name: \"auth\",\n-  initialState,\n-  extraReducers: {\n-    [userLogin.pending]: (state) => {\n-      state.isLoader = true;\n-      state.user = null;\n-    },\n-    [userLogin.rejected]: (state) => {\n-      state.isLoader = false;\n-      state.user = null;\n-    },\n-    [userLogin.fulfilled]: (state, action) => {\n-      state.isLoader = false;\n-      state.user = action.payload;\n-    },\n-    [userRegister.pending]: (state) => {\n-      state.isLoader = true;\n-      state.user = null;\n-    },\n-    [userRegister.rejected]: (state) => {\n-      state.isLoader = false;\n-      state.user = null;\n-    },\n-    [userRegister.fulfilled]: (state, action) => {\n-      state.isLoader = false;\n-      state.user = null;\n-    },\n-    [handleLogout.fulfilled]: (state, action) => {\n-      state.isLoader = false;\n-      state.user = null;\n-    },\n-  },\n-});\n-\n-export default authSlice.reducer;\n-import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n-/*  Auth service APIs */\n-import AuthService from \"../services/auth\";\n-import { setMessage } from \"./message\";\n-\n-/* UserLogin Slice */\n-export const userLogin = createAsyncThunk(\n-  \"user/login\",\n-  async ({ email, password }, thunkAPI) => {\n-    try {\n-      const data = await AuthService.userLogin(email, password);\n-      thunkAPI.dispatch(setMessage(data.message));\n-      return data.docs;\n-    } catch (error) {\n-      const message =\n-        (error.response &&\n-          error.response.data &&\n-          error.response.data.message) ||\n-        error.message ||\n-        error.toString();\n-      thunkAPI.dispatch(setMessage(message));\n       return thunkAPI.rejectWithValue();\n-    }\n-  }\n-);\n-\n-/* userRegister Slice */\n-export const userRegister = createAsyncThunk(\n-  \"user/register\",\n-  async ({ name, email, password }, thunkAPI) => {\n-    try {\n-      const data = await AuthService.userRegister(name, email, password);\n-      thunkAPI.dispatch(setMessage(data.message));\n     } catch (error) {\n-      const message =\n-        (error.response &&\n-          error.response.data &&\n-          error.response.data.message) ||\n-        error.message ||\n-        error.toString();\n-      thunkAPI.dispatch(setMessage(message));\n-      return thunkAPI.rejectWithValue();\n-    }\n-  }\n-);\n-\n-export const handleLogout = createAsyncThunk(\n-  \"user/logout\",\n-  async (thunkAPI) => {\n-    try {\n-      thunkAPI.dispatch(clearMessage());\n-      thunkAPI.dispatch(setMessage(\"Logout successfully\"));\n-    } catch (error) {\n       console.log(error, \"error during logout\")\n     }\n   })\n \n"
                },
                {
                    "date": 1701258484815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,103 @@\n+import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n+/*  Auth service APIs */\n+import AuthService from \"../services/auth\";\n+import { setMessage } from \"./message\";\n+\n+/* UserLogin Slice */\n+export const userLogin = createAsyncThunk(\n+  \"user/login\",\n+  async ({ email, password }, thunkAPI) => {\n+    try {\n+      const data = await AuthService.userLogin(email, password);\n+      thunkAPI.dispatch(setMessage(data.message));\n+      return data.docs;\n+    } catch (error) {\n+      const message =\n+        (error.response &&\n+          error.response.data &&\n+          error.response.data.message) ||\n+        error.message ||\n+        error.toString();\n+      thunkAPI.dispatch(setMessage(message));\n+      return thunkAPI.rejectWithValue();\n+    }\n+  }\n+);\n+\n+/* userRegister Slice */\n+export const userRegister = createAsyncThunk(\n+  \"user/register\",\n+  async ({ name, email, password }, thunkAPI) => {\n+    try {\n+      const data = await AuthService.userRegister(name, email, password);\n+      thunkAPI.dispatch(setMessage(data.message));\n+    } catch (error) {\n+      const message =\n+        (error.response &&\n+          error.response.data &&\n+          error.response.data.message) ||\n+        error.message ||\n+        error.toString();\n+      thunkAPI.dispatch(setMessage(message));\n+      return thunkAPI.rejectWithValue();\n+    }\n+  }\n+);\n+\n+export const handleLogout = createAsyncThunk(\n+  \"user/logout\",\n+  async (thunkAPI) => {\n+    try {\n+      thunkAPI.dispatch(clearMessage());\n+      thunkAPI.dispatch(setMessage(\"Logout successfully\"));\n+    } catch (error) {\n+      console.log(error, \"error during logout\")\n+    }\n+  })\n+\n+\n+/* Auth initiakState */\n+const initialState = {\n+  isLoading: false,\n+  isLoggedIn: false,\n+  error: null,\n+  user: null,\n+};\n+\n+\n+export const authSlice = createSlice({\n+  name: \"auth\",\n+  initialState,\n+  extraReducers: {\n+    [userLogin.pending]: (state) => {\n+      state.isLoader = true;\n+      state.user = null;\n+    },\n+    [userLogin.rejected]: (state) => {\n+      state.isLoader = false;\n+      state.user = null;\n+    },\n+    [userLogin.fulfilled]: (state, action) => {\n+      state.isLoader = false;\n+      state.user = action.payload;\n+    },\n+    [userRegister.pending]: (state) => {\n+      state.isLoader = true;\n+      state.user = null;\n+    },\n+    [userRegister.rejected]: (state) => {\n+      state.isLoader = false;\n+      state.user = null;\n+    },\n+    [userRegister.fulfilled]: (state, action) => {\n+      state.isLoader = false;\n+      state.user = null;\n+    },\n+    [handleLogout.fulfilled]: (state, action) => {\n+      state.isLoader = false;\n+      state.user = null;\n+    },\n+  },\n+});\n+\n+export default authSlice.reducer;\n"
                }
            ],
            "date": 1701192418527,
            "name": "Commit-0",
            "content": "import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n/*  Auth service APIs */\nimport AuthService from \"../services/auth\";\nimport { setMessage } from \"./message\";\n\n/* UserLogin Slice */\nexport const userLogin = createAsyncThunk(\n  \"user/login\",\n  async ({ email, password }, thunkAPI) => {\n    try {\n      const data = await AuthService.userLogin(email, password);\n      thunkAPI.dispatch(setMessage(data.message));\n      console.log(\"data\", data);\n      return data.docs;\n    } catch (error) {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n      thunkAPI.dispatch(setMessage(message));\n      return thunkAPI.rejectWithValue();\n    }\n  }\n);\n\n/* userRegister Slice */\nexport const userRegister = createAsyncThunk(\n  \"user/register\",\n  async ({ username, email, password }, thunkAPI) => {\n    try {\n      const data = await AuthService.userRegister(username, email, password);\n      thunkAPI.dispatch(setMessage(data.message));\n    } catch (error) {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n      thunkAPI.dispatch(setMessage(message));\n      return thunkAPI.rejectWithValue();\n    }\n  }\n);\n\n/* Auth initiakState */\nconst initialState = {\n  isLoading: false,\n  isLoggedIn: false,\n  error: null,\n  user: null,\n};\n\nexport const authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  extraReducers: {\n    [userLogin.pending]: (state) => {\n      state.isLoader = true;\n      state.user = null;\n    },\n    [userLogin.rejected]: (state) => {\n      state.isLoader = false;\n      state.user = null;\n    },\n    [userLogin.fulfilled]: (state, action) => {\n      state.isLoader = false;\n      state.user = action.payload;\n    },\n    [userRegister.pending]: (state) => {\n      state.isLoader = true;\n      state.user = null;\n    },\n    [userRegister.rejected]: (state) => {\n      state.isLoader = false;\n      state.user = null;\n    },\n    [userRegister.fulfilled]: (state, action) => {\n      state.isLoader = false;\n      state.user = null;\n    },\n  },\n});\n\nexport default authSlice.reducer;\n"
        }
    ]
}